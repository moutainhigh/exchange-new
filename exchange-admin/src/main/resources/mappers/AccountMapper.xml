<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blockeng.admin.mapper.AccountMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.blockeng.admin.entity.Account">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="coin_id" property="coinId"/>
        <result column="status" property="status"/>
        <result column="balance_amount" property="balanceAmount"/>
        <result column="freeze_amount" property="freezeAmount"/>
        <result column="recharge_amount" property="rechargeAmount"/>
        <result column="withdrawals_amount" property="withdrawalsAmount"/>
        <result column="net_value" property="netValue"/>
        <result column="lock_margin" property="lockMargin"/>
        <result column="float_profit" property="floatProfit"/>
        <result column="total_profit" property="totalProfit"/>
        <result column="rec_addr" property="recAddr"/>
        <result column="version" property="version"/>
        <result column="last_update_time" property="lastUpdateTime"/>
        <result column="created" property="created"/>
    </resultMap>


    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id,
        user_id AS userId,
        coin_id AS coinId,
        STATUS,
        balance_amount AS balanceAmount,
        freeze_amount AS freezeAmount,
        recharge_amount AS rechargeAmount,
        withdrawals_amount AS withdrawalsAmount,
        net_value AS netValue,
        lock_margin AS lockMargin,
        float_profit AS floatProfit,
        total_profit AS totalProfit,
        rec_addr AS recAddr,
        version,
        last_update_time AS lastUpdateTime,
        created
    </sql>

    <sql id="Page_Column_List">
        a.id,
        a.user_id AS userId,
        a.coin_id AS coinId,
        a. STATUS AS STATUS,
        a.balance_amount AS balanceAmount,
        a.freeze_amount AS freezeAmount,
        a.recharge_amount AS rechargeAmount,
        a.withdrawals_amount AS withdrawalsAmount,
        a.net_value AS netValue,
        a.lock_margin AS lockMargin,
        a.float_profit AS floatProfit,
        a.total_profit AS totalProfit,
        a.rec_addr AS recAddr,
        version,
        a.last_update_time AS lastUpdateTime,
        a.created AS created,
        b.username AS userName,
        b.real_name AS realName,
        b.mobile AS mobile,
        c. NAME AS coinName
    </sql>

    <select id="selectListPage" resultType="com.blockeng.admin.entity.Account">
        SELECT
        <include refid="Page_Column_List"/>
        FROM `account` a
        LEFT JOIN `user` b ON a.user_id = b.id
        LEFT JOIN coin c ON a.coin_id = c.id
        <where>
            ${ew.sqlSegment}
        </where>
        ORDER BY a.created DESC
    </select>


    <select id="selectListPageEmpty" resultType="com.blockeng.admin.entity.Account">
        SELECT
        <include refid="Page_Column_List"/>
        FROM
        account a
        LEFT JOIN `user` b ON a.user_id = b.id
        LEFT JOIN coin c ON a.coin_id = c.id
        ORDER BY a.created DESC
        limit #{current},#{size}
    </select>


    <select id="selectListPageFromAccount" resultType="com.blockeng.admin.entity.Account">
        SELECT
        <include refid="Page_Column_List"/>
        FROM (
        SELECT *
        FROM
        `account` a
        <where>
            ${accountEw.sqlSegment}
        </where>
        ) AS a
        LEFT JOIN `user` b ON a.user_id = b.id
        LEFT JOIN coin c ON a.coin_id = c.id
        <where>
            ${userEw.sqlSegment}
        </where>
        ORDER BY a.created DESC LIMIT #{current},#{size}
    </select>


    <select id="selectListPageFromUser" resultType="com.blockeng.admin.entity.Account">
        SELECT
        <include refid="Page_Column_List"/>
        FROM
        (SELECT * FROM `user` b
        <where>
            ${userEw.sqlSegment}
        </where>
        ) as b
        LEFT JOIN `account` a ON a.user_id = b.id
        LEFT JOIN coin c ON a.coin_id = c.id
        <where>
            ${accountEw.sqlSegment}
        </where>
        ORDER BY a.created DESC LIMIT #{current},#{size}
    </select>


    <select id="selectListPageCount" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM
        `account` a

    </select>


    <select id="selectListPageCountFromAccount" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM (
        SELECT *
        FROM
        `account` a
        <where>
            ${accountEw.sqlSegment}
        </where>
        ) AS a
        left join `user` b on a.user_id = b.id
        <where>
            ${userEw.sqlSegment}
        </where>

    </select>


    <select id="selectListPageCountFromUser"  resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM (
        SELECT *
        FROM
        `user` b
        <where>
            ${userEw.sqlSegment}
        </where>
        ) b
        left join `account` a on a.user_id = b.id
        <where>
            ${accountEw.sqlSegment}
        </where>
    </select>
    <select id="selectBalanceCountByCoinId" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `account` a
        join  `user` b  on  a.user_id=b.id
        where  a.coin_id = #{_parameter}
            <![CDATA[ AND (a.balance_amount > 0 or a.freeze_amount> 0 )]]>
        and b.flag=0



    </select>


    <!-- 冻结账户资金 -->
    <update id="lockAmount">
        UPDATE `account` SET
        balance_amount = balance_amount - #{amount},
        freeze_amount = freeze_amount + #{amount}
        WHERE id = #{accountId}
        <![CDATA[AND balance_amount >= #{amount}]]>
        <!--<![CDATA[-->
        <!--AND FORMAT(balance_amount,2) >= #{amount}-->

        <!--]]>-->
    </update>

    <!-- 提币解冻账户资金 -->
    <update id="unlockAmount">
        UPDATE `account` SET
        balance_amount = balance_amount + #{amount},
        freeze_amount = freeze_amount - #{amount}
        WHERE id = #{accountId}
        <![CDATA[AND freeze_amount >= #{amount}]]>
        <!--<![CDATA[-->
        <!--AND convert(freeze_amount,decimal(40,2)) >= #{amount}-->
        <!--]]>-->
    </update>

    <!--提现解冻账户资金-->
    <update id="unlockCashAmount">
        UPDATE `account` SET
        balance_amount = balance_amount + #{amount},
        freeze_amount = freeze_amount - #{amount}
        WHERE id = #{accountId}
        <![CDATA[
        AND convert(freeze_amount,decimal(40,2)) >= #{amount}
        ]]>
    </update>

    <!-- 增加账户资金 -->
    <update id="addAmount">
        UPDATE `account` SET
        balance_amount = balance_amount + #{amount},
        recharge_amount = recharge_amount + #{amount}
        WHERE id = #{accountId}
    </update>

    <!-- 扣减账户资金 -->
    <update id="subtractAmount">
        UPDATE `account` SET
        balance_amount = balance_amount - #{amount},
        withdrawals_amount = withdrawals_amount + #{amount}
        WHERE id = #{accountId}
        <![CDATA[AND balance_amount >= #{amount}]]>
        <!--<![CDATA[-->
        <!--AND convert(balance_amount,decimal(40,2)) >= #{amount}-->
        <!--]]>-->
    </update>

    <select id="countUserNumberAndBalanceByFlag" resultType="java.util.HashMap">
        SELECT
        u.flag AS userFlag,SUM(a.balance_amount) AS available,COUNT(1) AS userCount
        FROM account a
        LEFT JOIN user u
        ON a.user_id=u.id
        WHERE a.coin_id=#{coinId}
        <if test=" userFlag!=null and userFlag!='' ">
            AND u.flag in (#{userFlag})
        </if>
        GROUP BY u.flag
    </select>
    <select id="selectAmount" resultType="java.math.BigDecimal">
       SELECT sum(a.balance_amount)+SUM(a.`freeze_amount`)  as balanceTotal
        FROM `account` a
        join  `user` b  on  a.user_id=b.id
        where  a.coin_id = #{_parameter}
        and b.flag=0

    </select>

    <select id="selectBalanceByUser" resultType="java.util.HashMap">
       SELECT a.`coin_id` AS coinId,`balance_amount` AS balance,a.`freeze_amount` AS freeze
       FROM `account` a
       WHERE `user_id` =#{userId}
    </select>


    <select id="queryByUserIdAndCoinId" resultType="com.blockeng.admin.entity.Account">
        SELECT
        <include refid="Base_Column_List"/>
        FROM account a
        WHERE a.user_id=#{userId}
        AND a.coin_id=#{coinId}
        AND a.status=#{status}
    </select>
</mapper>
