<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blockeng.admin.mapper.CashWithdrawalsMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.blockeng.admin.entity.CashWithdrawals">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="coin_id" property="coinId"/>
        <result column="account_id" property="accountId"/>
        <result column="num" property="num"/>
        <result column="fee" property="fee"/>
        <result column="mum" property="mum"/>
        <result column="truename" property="truename"/>
        <result column="bank" property="bank"/>
        <result column="bank_prov" property="bankProv"/>
        <result column="bank_city" property="bankCity"/>
        <result column="bank_addr" property="bankAddr"/>
        <result column="bank_card" property="bankCard"/>
        <result column="remark" property="remark"/>
        <result column="step" property="step"/>
        <result column="status" property="status"/>
        <result column="last_update_time" property="lastUpdateTime"/>
        <result column="created" property="created"/>
        <result column="last_time" property="lastTime"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, user_id AS userId, coin_id AS coinId, account_id AS accountId, num, fee, mum, truename, bank, bank_prov AS
        bankProv, bank_city AS bankCity, bank_addr AS bankAddr, bank_card AS bankCard, remark, step, status,
        last_update_time AS lastUpdateTime, created,last_time AS lastTime
    </sql>

    <resultMap id="BaseDTOMap" type="com.blockeng.admin.dto.UserWithDrawalsDTO" extends="BaseResultMap">
        <result column="username" property="username"/>
        <result column="real_name" property="realName"/>
        <result column="realAmount" property="realAmount"/>
        <result column="bankNameAndCard" property="bankNameAndCard"/>
        <result column="statusStr" property="statusStr"/>
    </resultMap>


    <sql id="Base_Column_DTO">
        c.id,
        c.user_id,
        c.coin_id,
        c.account_id,
        c.num,
        c.fee,
        c.mum,
        c.mum AS realAmount,
        c.truename,
        c.bank,
        CONCAT(c.bank, '/', c.bank_card) AS bankNameAndCard,
        c.status as statusStr,
        c.bank_prov,
        c.bank_city,
        c.bank_addr,
        c.bank_card,
        c.remark,
        c.step,
        c.`status`,
        c.last_update_time,
        c.created,
        c.last_time,
        u.username ,
        u.real_name

    </sql>


    <sql id="params">

        <if test=" userId !=null and userId!='' ">
            and c.user_id=#{userId}
        </if>
        <if test=" userName !=null and userName!='' ">
            and u.username LIKE CONCAT('%',#{userName}, '%')
        </if>
        <if test=" mobile !=null and mobile!='' ">
            and u.mobile LIKE CONCAT('%',#{mobile}, '%')
        </if>
        <if test=" status !=null and status!='' ">
            and c.status=#{status}
        </if>
        <if test=" coinId !=null and coinId!='' ">
            and c.coin_id=#{coinId}
        </if>
        <if test=" numMin !=null and numMin!='' ">
            <![CDATA[ and c.num >= #{numMin} ]]>
        </if>
        <if test=" numMax !=null and numMax!='' ">
            <![CDATA[ and c.num <= #{numMax} ]]>
        </if>
        <if test=" startTime !=null and startTime!='' ">
            <![CDATA[ and c.created >= #{startTime} ]]>
        </if>
        <if test=" endTime !=null and endTime!='' ">
            <![CDATA[ and c.created <= #{endTime} ]]>
        </if>
    </sql>

    <select id="selectMapPage" resultMap="BaseDTOMap">

        SELECT
        <include refid="Base_Column_DTO"/>
        FROM
        cash_withdrawals c
        INNER JOIN `user` u ON c.user_id = u.id
        where 1=1
        <include refid="params"/>
        ORDER BY c.created DESC
    </select>

    <select id="selectOneObj" resultMap="BaseDTOMap">

        SELECT
        <include refid="Base_Column_DTO"/>
        FROM
        cash_withdrawals c
        INNER JOIN `user` u ON c.user_id = u.id
        where c.id=#{id}
    </select>


    <select id="selectCashWithdrawalsDTOList" resultMap="BaseDTOMap">

        SELECT
        <include refid="Base_Column_DTO"/>
        FROM
        cash_withdrawals c
        INNER JOIN `user` u ON c.user_id = u.id
        <if test=" pageSize!=null">
            LIMIT #{ pageSize}
        </if>
    </select>

    <select id="countByDateAndUidStrs" resultType="java.lang.Integer">
        SELECT count(0) FROM cash_withdrawals
        WHERE DATE_FORMAT(created,"%Y-%m-%d") = DATE_FORMAT(#{countDate},"%Y-%m-%d")
        AND user_id IN(#{uidStrs})
        <if test="status > 0 ">
            AND status = #{status}
        </if>
    </select>


    <!--提现金额，到账金额，提现币种，提现笔数，提现用户数 ，提现时间 统计-->
    <select id="selectCountMain" resultType="com.blockeng.admin.dto.CashWithdrawalsCountDTO">
        SELECT
        sum(c.num) sumNum,
        sum(c.mum) sumMum,
        COUNT(c.id) counts,
        count(DISTINCT c.user_id) userCounts,
        DATE_FORMAT(c.created, "%Y-%m-%d") AS created
        FROM
        cash_withdrawals c
        WHERE
        1=1
        <if test=" startTime !=null and startTime!='' ">
            <![CDATA[ and c.created >= #{startTime} ]]>
        </if>
        <if test=" endTime !=null and endTime!='' ">
            <![CDATA[ and c.created <= #{endTime} ]]>
        </if>
        <!--<if test=" coinId !=null and coinId!='' ">
            and c.coin_id= #{coinId}
        </if>-->
        GROUP BY
        DATE_FORMAT(c.created, "%Y-%m-%d")
        ORDER BY created DESC
    </select>
    <!--成功笔数，充值时间-->
    <select id="selectValidCounts" resultType="com.blockeng.admin.dto.CashWithdrawalsCountDTO">
        SELECT validCounts,created from (
        SELECT
        COUNT(c.id) validCounts,
        DATE_FORMAT(c.created, "%Y-%m-%d") AS created
        FROM
        cash_withdrawals c
        WHERE
        c.`status` = 3
        GROUP BY
        DATE_FORMAT(c.created, "%Y-%m-%d")
        )b
        WHERE created IN
        <foreach collection="createds" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>

    </select>
    <!--用户数，用户id，充值时间-->
    <select id="selectUserCt" resultType="com.blockeng.admin.dto.CashWithdrawalsCountDTO">
        SELECT userCt,userId,created from ( SELECT
        count(c.user_id) userCt,
        c.user_id as userId,
        DATE_FORMAT(c.created, "%Y-%m-%d") AS created
        FROM
        cash_withdrawals c
        GROUP BY
        DATE_FORMAT(c.created, "%Y-%m-%d"),
        c.user_id
        )b
        WHERE created IN
        <foreach collection="createds" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>


    <select id="countByDateAndUidStrs" resultType="java.lang.Integer">
        SELECT count(0) FROM cash_recharge
        WHERE DATE_FORMAT(created,"%Y-%m-%d") = DATE_FORMAT(#{countDate},"%Y-%m-%d")
        AND user_id IN(#{uidStrs})
        <if test="status > 0 ">
            AND status = #{status}
        </if>
    </select>

    <select id="selectCashRechargeFreeze" resultType="com.blockeng.admin.entity.AccountFreeze">
        SELECT u.flag AS userFlag,SUM(c.`num`+c.`fee` ) AS freeze
        FROM `cash_withdrawals` c
        LEFT JOIN `user` u
        on c.`user_id` =u.`id`
        WHERE c.`status` in (0,1)
        and c.`coin_id` = #{coinId}
        <if test=" userFlag!=null and userFlag!='' ">
            and u.`flag` in (#{userFlag})
        </if>
        GROUP BY u.`flag` ;
    </select>

    <select id="selectCurbExchangeWithdrawStatistics" resultType="com.blockeng.admin.entity.CurbExchangeWithdrawStatistics">
        SELECT
        c.user_id AS userId,SUM(c.num) AS withdrawAmount,SUM(c.fee) AS fee,SUM(c.num-c.fee) AS transferAmount,COUNT(1) AS withdrawTimes
        FROM cash_withdrawals c
        WHERE status=3
        AND last_time BETWEEN #{startTime} AND #{endTime}
        <if test=" userId!=null and userId!='' ">
            AND c.user_id=#{userId}
        </if>
        GROUP BY c.user_id

    </select>

    <select id="countCurbExchangeWithdraw" resultType="java.util.HashMap">
        SELECT
        SUM(c.num) AS withdrawAmount,SUM(c.fee) AS fee,SUM(c.num-c.fee) AS transferAmount,COUNT(1) AS withdrawTimes,COUNT(DISTINCT(c.user_id)) AS total
        FROM cash_withdrawals c
        WHERE status=3
        AND last_time BETWEEN #{startTime} AND #{endTime}
        <if test=" userId!=null and userId!='' ">
            AND c.user_id=#{userId}
        </if>
    </select>

    <select id="selectCashWithdrawGroupCoin" resultType="java.util.HashMap">
        SELECT c.`coin_id` AS coinId,SUM(c.`num`) AS num
        FROM `cash_withdrawals` c
        WHERE c.`user_id`=#{userId}
        AND c.`status`=#{status}
        GROUP BY c.`coin_id`
    </select>

    <select id="selectCashWithdrawFreezeGroupByCoin" resultType="java.util.HashMap">
        SELECT c.`coin_id` AS coinId,SUM(c.`num`) AS num
        FROM `cash_withdrawals` c
        WHERE c.`user_id` =#{userId}
        AND c.`status`
        IN (#{status})
        GROUP BY c.`coin_id`
    </select>

</mapper>
